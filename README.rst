#######
yarolin
#######

A library offering feature complete functionality for options and results. Has the look of a mixup between rust and zig results/options. Feature requests are welcome. PRs not so much.

=====
Usage
=====
Add this line to your ``.nimble`` file:

.. code-block:: nim

  requires "https://github.com/fabriciopashaj/yarolin"

and then you can import it in your project.

-------
Results
-------
.. code-block:: nim

  import yarolin/results

  # We have `!` style result types like in Zig, using macros.
  proc foo(): void!int =
    result =!- 420
  proc bar(): string!void =
    result =!+ "Hello world"

  echo foo().getErr() # prints "420"
  echo bar().getVal() # prints "Hello world"

-------
Options
-------
.. code-block:: nim

  import yarolin/options

  proc at[T](arr: openArray[T], i: int): ?T =
    if i in 0..arr.high:
      return some(arr[i])
    return none(T)

  let a = @[1, 2, 3]
  echo a.at(0).get() # prints "1"
  echo a.at(100).isSome() # prints "false"

.. code-block:: nim

    import strtabs, strutils
    import yarolin/options

    type Config = object
      width, height, fontSize: int
      font: string

    func get(strtab: StringTableRef, key: string): ?string =
      if strtab.hasKey(key):
        return some(strtab[key])
      result = none(string)

    func getConfig(strtab: StringTableRef): Config =
      Config(
        width: strtab.get("width").map(parseInt) or 680,
        height: strtab.get("height").map(parseInt) or 460,
        fontSize: strtab.get("fontSize").map(parseInt) or 30,
        font: strtab.get("font") or "monospace")

=============
Documentation
=============
The explanation and documentation in this README is not sufficient at all, so there is an online version of the documentation `here <https://fabriciopashaj.github.io/yarolin>`_ generated by ``nimdoc``. You can also run the nimble task

.. code-block:: bash
   nimble docs_gen

to generate them localy.
